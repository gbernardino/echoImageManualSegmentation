{"version":3,"sources":["store.js","components/BaseImage.js","components/Polyline.js","components/polylineMath.js","components/Canvas.js","components/reconstructionEchocardiography.js","components/unit.js","components/App.js","index.js"],"names":["_create","create","set","width","window","innerWidth","height","innerHeight","setSize","_ref","imageWidth","imageHeight","imageURL","setImageURL","url","setImageSize","size","scale","setScale","brightness","setBrightness","modeInteraction","setInteraction","polyline","setPolyline","useStore","Object","slicedToArray","IMAGE_NUMBER","Math","round","random","IMAGE_URL","concat","BaseImage","imgURL","s","_useImage","useImage","image","state","React","useEffect","min","ratio","layerRef","useRef","current","getCanvas","_canvas","style","filter","react_default","a","createElement","ReactKonva","ref","Polyline","name","points","strokeWidth","stroke","N","length","arr","_loop","i","push","key","x","y","radius","fill","draggable","onDragEnd","e","target","onDragMove","getNodes","pDistance","x1","y1","x2","y2","xx","yy","C","D","len_sq","param","dx","dy","sqrt","zoomStage","stage","scaleBy","point","arguments","undefined","oldScale","scaleX","pos","mousePointTo","newScale","max","newPos","newAttrs","box","findOne","getClientRect","minX","maxX","minY","maxY","limitAttributes","objectSpread2","to","scaleY","duration","Canvas","stageRef","_useStore","mode","checkSize","container","document","querySelector","offsetWidth","addEventListener","removeEventListener","Fragment","className","onClick","node","transform","getAbsoluteTransform","copy","invert","getStage","getPointerPosition","getRelativePointerPosition","newPolyline","coordinates","d","iMin","d2Min","d2","closestNode","splice","dMin","console","log","closestEdge","ndarray","require","Units","classCallCheck","this","sor","addSOR","createClass","value","x0","y0","xScale","yScale","r","String","label","RegionDataTypeToString","savePixels","hdf5","dcmjs","getCSV","u","csvContent","p","points_trnf","toConsumableArray","applySOR","encodedUri","encodeURI","link","setAttribute","body","appendChild","click","cornerstoneTools","cornerstone","cornerstoneMath","Hammer","cornerstoneWADOImageLoader","dicomParser","App","useWebWorkers","_useState","useState","_useState2","units","setUnits","_useState3","_useState4","selectedUnitIdx","setSelectedUnitIdx","onDrop","useCallback","acceptedFiles","datafilename","filename","type","reader","FileReader","onloadend","evt","dcm","array","Uint8Array","result","fromCharCode","barr","f","File","im","indices","t","tissue","get","imageShape","shape","nLines","nPixelsR","imagePolart","pick","Float32Array","nPixelsX","nPixelsY","j","id_r","R_idx","id_theta","theta_idx","reconstructEcholine","desiredPixelSize","dtheta","attrs","theta0","dr","xmax","ymax","sin","ymin","ceil","X","Y","Int32Array","atan","generateIndices","imCanvas","toDataURL","imageId","fileManager","add","then","DicomDict","data","DicomMessage","readFile","dataset","DicomMetaDictionary","naturalizeDataset","dict","SequenceOfUltrasoundRegions","ReferencePixelX0","ReferencePixelX1","PhysicalDeltaX","PhysicalDeltaY","RegionDataType","readAsArrayBuffer","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","assign","boxShadow","border","textAlign","top","z_index","id","step","defaultValue","onChange","parseFloat","event","dist_default","placeholder","options","getOptionsList","rootElement","getElementById","ReactDOM","render"],"mappings":"+QAEAA,EAAmBC,YAAO,SAAAC,GAAG,MAAK,CAChCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,YACfC,QAAS,SAAAC,GAAA,IAAGN,EAAKM,EAALN,MAAOG,EAAMG,EAANH,OAAM,OAAOJ,EAAI,CAAEC,QAAOG,YAE7CI,WAAY,IACZC,YAAa,IAEbC,SAAW,KACXC,YAAc,SAAAC,GAAG,OAAIZ,EAAI,CAACU,SAAUE,KAEpCC,aAAc,SAAAC,GAAI,OAChBd,EAAI,iBAAO,CAAEQ,WAAYM,EAAKb,MAAOQ,YAAaK,EAAKV,WACzDW,MAAO,EACPC,SAAU,SAAAD,GAAK,OAAIf,EAAI,CAAEe,WAEzBE,WAAY,EACZC,cAAe,SAAAD,GAAU,OAAIjB,EAAI,CAAEiB,gBAEnCE,gBAAkB,MAClBC,eAAiB,SAAAD,GAAe,OAAInB,EAAI,CAACmB,qBAEzCE,SAAW,GACXC,YAAc,SAAAD,GAAQ,OAAIrB,EAAI,CAACqB,iBAIlBE,EAFZC,OAAAC,EAAA,EAAAD,CAAA1B,EAAA,GAzBY,GCkBf,IAAM4B,EAAe,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UACnCC,EAAS,SAAAC,OAAYL,EAAY,QAExBM,EAAA,WACb,IAAMC,EAASV,EAAS,SAAAW,GAAC,OAAIA,EAAExB,WACzBE,EAAiB,OAAXqB,EAAkBH,EAAYG,EAC1CE,EAAgBC,IAASxB,EAAK,aAAvByB,EAAmCb,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAA9B,GAENtB,EAAeU,EAAS,SAAAe,GAAK,OAAIA,EAAMzB,eACvCG,EAAWO,EAAS,SAAAe,GAAK,OAAIA,EAAMtB,WACnCV,EAAUiB,EAAS,SAAAe,GAAK,OAAIA,EAAMhC,UAClCL,EAAQsB,EAAS,SAAAe,GAAK,OAAIA,EAAMrC,QAChCG,EAASmB,EAAS,SAAAe,GAAK,OAAIA,EAAMlC,SAE/Ba,EAAeM,IAAfN,WACSM,EAAS,SAACW,GAAC,OAAKA,EAAEb,WACfE,EAAS,SAACW,GAAC,OAAKA,EAAEZ,cACzBC,EAAS,SAACW,GAAC,OAAKA,EAAEf,kBAG/BoB,IAAMC,UAAU,WACd,GAAKH,EAAL,CAGA,IAAMtB,EAAQY,KAAKc,IAAIxC,EAAQoC,EAAMpC,MAAOG,EAASiC,EAAMjC,QAC3DY,EAASD,GACTF,EAAa,CAAEZ,MAAOoC,EAAMpC,MAAOG,OAAQiC,EAAMjC,SAEjD,IAAMsC,EAAQL,EAAMpC,MAAQoC,EAAMjC,OAClCE,EAAQ,CACNL,MAAOA,EACPG,OAAQH,EAAQyC,MAEjB,CAACL,EAAOpC,EAAOG,EAAQY,EAAUH,EAAcP,IAElD,IAAMqC,EAAWJ,IAAMK,OAAO,MAO9B,OALAL,IAAMC,UAAU,WACCG,EAASE,QAAQC,YAAYC,QACrCC,MAAMC,OAAM,cAAAlB,OAAoC,KAAlBd,EAAa,GAAQ,OACzD,CAACA,IAGFiC,EAAAC,EAAAC,cAACC,EAAA,EAAK,CAACC,IAAKX,GACVO,EAAAC,EAAAC,cAACC,EAAA,EAAK,CAAChB,MAAOA,MClCL,IAAAkB,EAAA,WACb,IAAMlC,EAAWE,EAAS,SAAAW,GAAC,OAAIA,EAAEb,WAC3BC,EAAcC,EAAS,SAAAW,GAAC,OAAIA,EAAEZ,cAC9BqB,EAAWJ,IAAMK,OAAO,MAG9B,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAK,CAACC,IAAKX,GACRO,EAAAC,EAAAC,cAACC,EAAA,EAAI,CAAEG,KAAK,WAAWC,OAAQpC,EAAUqC,YAAa,EAAGC,OAAO,WAlCxE,SAAkBtC,EAAUC,GAGxB,IAFA,IAAMsC,EAAIvC,EAASwC,OAAO,EACtBC,EAAM,GAAEC,EAAA,SACHC,GACLF,EAAIG,KACEf,EAAAC,EAAAC,cAACC,EAAA,EAAM,CAACa,IAAK,QAAQF,EAAGG,EAAG9C,EAAS,EAAE2C,GAAII,EAAG/C,EAAS,EAAE2C,EAAE,GAAIK,OAAQ,EAAGC,KAAK,MAAOC,WAAS,EAC9FC,UACE,SAAAC,GACIpD,EAAS,EAAE2C,GAAKS,EAAEC,OAAOP,IACzB9C,EAAS,EAAE2C,EAAI,GAAKS,EAAEC,OAAON,IAC7B9C,EAAYD,IAGpBsD,WACQ,SAAAF,GACIpD,EAAS,EAAE2C,GAAKS,EAAEC,OAAOP,IACzB9C,EAAS,EAAE2C,EAAI,GAAKS,EAAEC,OAAON,SAbxCJ,EAAI,EAAGA,EAAIJ,EAAGI,IAAKD,EAAnBC,GAkBT,OACIF,EAcIc,CAASvD,EAAUC,KCxB/B,SAASuD,EAAUV,EAAGC,EAAGU,EAAIC,EAAIC,EAAIC,GAEjC,IAWIC,EAAIC,EATJC,EAAIJ,EAAKF,EACTO,EAAIJ,EAAKF,EAGTO,EAASF,EAAIA,EAAIC,EAAIA,EACrBE,GAAS,EACE,IAAXD,IACAC,IATIpB,EAAIW,GAKEM,GAJNhB,EAAIW,GAIUM,GAIJC,GAIdC,EAAQ,GACVL,EAAKJ,EACLK,EAAKJ,GAEEQ,EAAQ,GACfL,EAAKF,EACLG,EAAKF,IAGLC,EAAKJ,EAAKS,EAAQH,EAClBD,EAAKJ,EAAKQ,EAAQF,GAGpB,IAAIG,EAAKrB,EAAIe,EACTO,EAAKrB,EAAIe,EACb,OAAOxD,KAAK+D,KAAKF,EAAKA,EAAKC,EAAKA,GCzBpC,SAASE,EAAUC,EAAOC,GAAuB,IAAdC,EAAKC,UAAAlC,OAAA,QAAAmC,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACnCE,EAAWL,EAAMM,SACnBC,EAAK,CACPhC,EAAGyB,EAAM3F,QAAU,EACnBmE,EAAGwB,EAAMxF,SAAW,GAET,MAAT0F,IACDK,EAAIhC,EAAI2B,EAAM3B,EACdgC,EAAI/B,EAAI0B,EAAM1B,GAKjB,IAAMgC,EACDD,EAAIhC,EAAI8B,EAAWL,EAAMzB,IAAM8B,EAD9BG,EAEDD,EAAI/B,EAAI6B,EAAWL,EAAMxB,IAAM6B,EAG9BI,EAAW1E,KAAK2E,IAAI,IAAML,EAAWJ,GAErCU,EAAS,CACbpC,IAAKiC,EAAiBD,EAAIhC,EAAIkC,GAAYA,EAC1CjC,IAAKgC,EAAiBD,EAAI/B,EAAIiC,GAAYA,GAGtCG,EAWR,SAAyBZ,EAAOY,GAC9B,IAAMC,EAAMb,EAAMc,QAAQ,SAASC,gBAC7BC,GAAQH,EAAIxG,MAAQ2F,EAAM3F,QAAU,EACpC4G,EAAOjB,EAAM3F,QAAU,EAEvBkE,EAAIxC,KAAK2E,IAAIM,EAAMjF,KAAKc,IAAI+D,EAASrC,EAAG0C,IAExCC,GAAQL,EAAIrG,OAASwF,EAAMxF,SAAW,EACtC2G,EAAOnB,EAAMxF,SAAW,EAExBgE,EAAIzC,KAAK2E,IAAIQ,EAAMnF,KAAKc,IAAI+D,EAASpC,EAAG2C,IAExChG,EAAQY,KAAK2E,IAAI,IAAME,EAASzF,OAEtC,MAAO,CAAEoD,IAAGC,IAAGrD,SAzBEiG,CAAgBpB,EAAMpE,OAAAyF,EAAA,EAAAzF,QAAAyF,EAAA,EAAAzF,CAAA,GAAM+E,GAAM,IAAExF,MAAOsF,KAE5DT,EAAMsB,GAAG,CACP/C,EAAGqC,EAASrC,EACZC,EAAGoC,EAASpC,EACZ8B,OAAQM,EAASzF,MACjBoG,OAAQX,EAASzF,MACjBqG,SAAU,KAqBC,IAAAC,EAAA,WACb,IAAMC,EAAW/E,IAAMK,SACvB2E,EAA0BhG,EAAS,SAACW,GAAC,MAAM,CACzCjC,MAAOiC,EAAEjC,MACTG,OAAQ8B,EAAE9B,UAFJH,EAAKsH,EAALtH,MAAOG,EAAMmH,EAANnH,OAITE,EAAUiB,EAAS,SAACW,GAAC,OAAKA,EAAE5B,UAC5BS,EAAQQ,EAAS,SAACe,GAAK,OAAKA,EAAMvB,QAElCM,EAAWE,EAAS,SAACW,GAAC,OAAKA,EAAEb,WAE7BC,EAAcC,EAAS,SAACW,GAAC,OAAKA,EAAEZ,cAChCkG,EAAOjG,EAAS,SAACW,GAAC,OAAKA,EAAEf,kBAgB/B,OAbAoB,IAAMC,UAAU,WACd,SAASiF,IACP,IAAMC,EAAYC,SAASC,cAAc,gBACzCtH,EAAQ,CACNL,MAAOyH,EAAUG,YACjBzH,WAKJ,OAFAqH,IACAvH,OAAO4H,iBAAiB,SAAUL,GAC3B,kBAAMvH,OAAO6H,oBAAoB,SAAUN,KACjD,IAGDvE,EAAAC,EAAAC,cAACF,EAAAC,EAAM6E,SAAQ,KACb9E,EAAAC,EAAAC,cAACC,EAAA,EAAK,CACJC,IAAKgE,EACLrH,MAAOA,EACPG,OAAQA,EACR8F,OAAQnF,EACRoG,OAAQpG,EACRkH,UAAU,SACV1D,WAAW,EACX2D,QAAS,SAACzD,GACR,IAAMqB,EAzGhB,SAAoCqC,GAElC,IAAMC,EAAYD,EAAKE,uBAAuBC,OAE9CF,EAAUG,SAGV,IAAMpC,EAAMgC,EAAKK,WAAWC,qBAG5B,OAAOL,EAAUtC,MAAMK,GA+FDuC,CAA2BjE,EAAEC,OAAO8D,YAElD,GAAa,QAAThB,EAAgB,CAClB,IAAMmB,EAActH,EAASU,OAAO,CAAC+D,EAAM3B,EAAG2B,EAAM1B,IACpD9C,EAAYqH,QAET,GAAa,WAATnB,EAAkB,CACvB,IAAIxD,EDxHX,SAAqB4E,EAAazE,EAAGC,GAGxC,IAHmD,IAARyE,EAAC9C,UAAAlC,OAAA,QAAAmC,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAC3C+C,GAAQ,EACRC,EAAQF,EAAEA,EACL7E,EAAI,EAAGA,EAAI4E,EAAY/E,OAAO,EAAGG,IAAI,CAC1C,IAAIwB,EAAMoD,EAAY,EAAE5E,GAAKG,EACzBsB,EAAMmD,EAAY,EAAE5E,EAAI,GAAKI,EAC7B4E,EAAKxD,EAAGA,EAAKC,EAAGA,EAChBuD,EAAKD,IACLD,EAAO9E,EACP+E,EAAQC,GAGhB,OAAOF,EC4GWG,CAAY5H,EAAUyE,EAAM3B,EAAG2B,EAAM1B,GACzCJ,GAAK,IACP3C,EAAS6H,OAAO,EAAElF,EAAG,GACrB1C,EAAYD,SAGb,GAAa,UAATmG,EAAiB,CACxB,IAAIxD,ED9ET,SAAqB4E,EAAazE,EAAGC,GAGxC,IAHmD,IAC/C0E,GAAQ,EACRK,EAFwCpD,UAAAlC,OAAA,QAAAmC,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAGtC/B,EAAI,EAAGA,EAAI4E,EAAY/E,OAAO,EAAG,EAAIG,IAAI,CAE9C,IAAI6E,EAAIhE,EAAUV,EAAGC,EAAGwE,EAAY,EAAE5E,GAAK4E,EAAY,EAAE5E,EAAI,GAAK4E,EAAY,EAAE5E,EAAI,GAAI4E,EAAY,EAAE5E,EAAI,IACtG6E,EAAIM,IACJL,EAAO9E,EACPmF,EAAON,GAIf,OADAO,QAAQC,IAAIF,GACLL,ECkESQ,CAAYjI,EAAUyE,EAAM3B,EAAG2B,EAAM1B,GACzCJ,GAAK,IACPoF,QAAQC,IAAIhI,GACZA,EAAS6H,OAAO,EAAElF,EAAI,EAAG,EAAG8B,EAAM3B,EAAG2B,EAAM1B,GAC3CgF,QAAQC,IAAIhI,GAEZC,EAAYD,OAMlB6B,EAAAC,EAAAC,cAACpB,EAAS,MACVkB,EAAAC,EAAAC,cAACG,EAAQ,OAEXL,EAAAC,EAAAC,cAAA,OAAK6E,UAAU,kBACb/E,EAAAC,EAAAC,cAAA,UACE8E,QAAS,WACPvC,EAAU2B,EAASzE,QAAS,OAC5B,KAIJK,EAAAC,EAAAC,cAAA,UACE8E,QAAS,WACPvC,EAAU2B,EAASzE,QAAS,MAC5B,gBCzJR0G,EAAUC,EAAQ,IACLA,EAAQ,0GCDZC,EAAK,WACd,SAAAA,IAAcjI,OAAAkI,EAAA,EAAAlI,CAAAmI,KAAAF,GACVE,KAAKC,IAAM,GACXD,KAAKE,OAAO,EAAE,EAAE,EAAE,EAAE,UAevB,OAdArI,OAAAsI,EAAA,EAAAtI,CAAAiI,EAAA,EAAAvF,IAAA,SAAA6F,MAED,SAAOC,EAAGC,EAAGC,EAAOC,EAAQ3G,GACxBmG,KAAKC,IAAI3F,KACL,CAAC+F,GAAIA,EAAIC,GAAIA,EAAIC,OAAQA,EAAQC,OAAQA,EAAQ3G,KAAMA,MAE9D,CAAAU,IAAA,iBAAA6F,MACD,WAGI,IADA,IAAIK,EAAI,GACCpG,EAAG,EAAGA,EAAG2F,KAAKC,IAAI/F,OAAQG,GAAK,EACpCoG,EAAEnG,KAAK,CAAC8F,MAAQM,OAAOrG,GAAIsG,MAAQX,KAAKC,IAAI5F,GAAGR,OAEnD,OAAO4G,MACVX,EAlBa,GAgCX,SAASc,EAAuBvG,GAEnC,OAAOA,GACL,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aACT,KAAK,EACH,MAAO,sBACT,KAAK,EACH,MAAO,sBACT,KAAK,EACH,MAAO,qBACT,KAAK,EACH,MAAO,qBACT,KAAK,EACH,MAAO,oBACT,KAAK,EACH,MAAO,eACT,KAAK,GACH,MAAO,YACT,KAAK,GACH,MAAO,cACT,KAAK,GACH,MAAO,wBACT,KAAK,GACH,MAAO,WACT,KAAK,GACH,MAAO,YACT,KAAK,GACH,MAAO,yBACT,KAAK,GACH,MAAO,aACT,KAAK,GACH,MAAO,aACT,KAAK,GACH,MAAO,iDACT,QACE,MAAO,sBCrDXwG,EAAahB,EAAQ,KACnBiB,EAAOvK,OAAOuK,KAGhBC,EAAQlB,EAAQ,KASpB,SAASmB,EAAOtJ,EAAUuJ,GACxB,IAAIC,EAAa,+BACbC,EDVE,SAAkBrH,EAAQmH,GAE9B,IADA,IAAIG,EAAWvJ,OAAAwJ,EAAA,EAAAxJ,CAAQiC,GACdO,EAAG,EAAGA,EAAIP,EAAOI,OAAQG,GAAI,EAClC+G,EAAY/G,IAAMP,EAAOO,EAAE,GAAK4G,EAAEZ,IAAMY,EAAEV,OAC1Ca,EAAY/G,EAAI,IAAMP,EAAOO,EAAE,GAAK4G,EAAEX,IAAMW,EAAET,OAElD,OAAOY,ECIDE,CAAS5J,EAAUuJ,GAC3BC,GAAc,UAAYD,EAAEpH,KAAO,KACnC,IAAK,IAAIQ,EAAG,EAAGA,EAAI8G,EAAEjH,OAAQG,GAAK,EAChC6G,GAAcR,OAAOS,EAAE9G,IAAM,IAAMqG,OAAOS,EAAE9G,EAAG,IAAM,OAEvD,IAAIkH,EAAaC,UAAUN,GACvBO,EAAOzD,SAASvE,cAAc,KAClCgI,EAAKC,aAAa,OAAQH,GAC1BE,EAAKC,aAAa,WAAY,eAC9B1D,SAAS2D,KAAKC,YAAYH,GAE1BA,EAAKI,QApBPC,WAA0BC,YAAcA,EACxCD,WAA0BE,gBAAkBA,EAC5CF,WAA0BG,OAASA,IACnCC,WAAoCC,YAAcA,EAClDD,WAAoCH,YAAcA,EAmBnC,IAAAK,EAAA,WACb,IAAQ7K,EAAkBK,IAAlBL,cACAE,EAAmBG,IAAnBH,eACAT,EAAgBY,IAAhBZ,YACAU,EAAaE,IAAbF,SAEFC,EAAcC,EAAS,SAACW,GAAC,OAAKA,EAAEZ,cAMtCuK,YAAqC,CAAEG,eAAe,IAEtD,IAAAC,EAA0BC,mBAAS,IAAIzC,GAAQ0C,EAAA3K,OAAAC,EAAA,EAAAD,CAAAyK,EAAA,GAAzCG,EAAKD,EAAA,GAAGE,EAAQF,EAAA,GACtBG,EAA6CJ,mBAAS,GAAEK,EAAA/K,OAAAC,EAAA,EAAAD,CAAA8K,EAAA,GAAlDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAEnCG,EAASC,sBAAY,SAAAC,GAEzB,IAAIC,EAAeD,EAAc,GAAGE,SAChCC,EAAOH,EAAc,GAAGG,KACxBC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,SAASC,GAK1B,IAJA,IAAIC,GAAM,EACNC,EAAQ,IAAIC,WAAWH,EAAIzI,OAAO6I,QAClCrL,EAAI,GAEC8B,EADG,IACQA,EADG,MACQA,EAC3B9B,GAAKmI,OAAOmD,aAAaH,EAAMrJ,IAG1B,QAAL9B,IACFkL,GAAM,GAGR,IAAIK,EAAON,EAAIzI,OAAO6I,OAClB3C,EAAI,IAAInB,EAGZ,GAAa,mBAATsD,EAA0B,CAC5B,IAAIW,EAAI,IAAIjD,EAAKkD,KAAKF,EAAMZ,GAIxBe,EFtCL,SAA6BnD,EAAMoD,EAASC,GAY/C,IAXA,IAAIC,EAAStD,EAAKuD,IAAI,UAClBC,EAAaF,EAAOG,MACpBC,EAASF,EAAW,GACpBG,EAAWH,EAAW,GAItBI,EADa9E,EAAQwE,EAAOhE,MAAOkE,GACVK,KAAKR,EAAG,KAAM,MAEvCF,EAAKrE,EAAQ,IAAIgF,aAAaV,EAAQW,SAASX,EAAQY,UAAW,CAACZ,EAAQW,SAASX,EAAQY,WAEvFzK,EAAI,EAAGA,EAAI6J,EAAQW,SAAUxK,IAClC,IAAK,IAAI0K,EAAI,EAAGA,EAAIb,EAAQY,SAAUC,IAAK,CACvC,IAAIC,EAAQd,EAAQe,MAAMZ,IAAIhK,EAAE0K,GAC5BG,EAAWhB,EAAQiB,UAAUd,IAAIhK,EAAE0K,GACnCC,EAAO,GAAKA,GAAQP,EACpBR,EAAG5N,IAAIgE,EAAE0K,EAAG,GAEPG,EAAW,GAAKA,GAAYV,EACjCP,EAAG5N,IAAIgE,EAAE0K,EAAG,GAGZd,EAAG5N,IAAIgE,EAAE0K,EAAIL,EAAYL,IAAIa,EAAUF,IAKnD,OAAOf,EEUMmB,CAAoBrB,EFvF9B,SAAyBjD,EAAMuE,GA0BlC,IAzBA,IAAIjB,EAAStD,EAAKuD,IAAI,UAClBC,EAAaF,EAAOG,MACpBC,EAASF,EAAW,GACpBG,EAAWH,EAAW,GAEtBgB,EAASlB,EAAOmB,MAAa,MAAIf,EACjCgB,GAAWpB,EAAOmB,MAAa,MAAG,EAClCE,EAAKrB,EAAOmB,MAAgB,SAAKd,EAKjCiB,GAHOtB,EAAOmB,MAAY,KAGnBnB,EAAOmB,MAAgB,UAC9BI,EAAOvB,EAAOmB,MAAgB,SAAIvN,KAAK4N,IAAIxB,EAAOmB,MAAa,MAAG,GAClEM,GAASF,EAGTd,EAAW7M,KAAK8N,MAAMJ,EANf,GAM4BL,GACnCP,EAAW9M,KAAK8N,MAAMH,EAAOE,GAAMR,GAKnCU,GAHe3B,EAAOmB,MAAa,MAAE,GAA8BnB,EAAOmB,MAAa,MAAE,GAGrF3F,EAAQ,IAAIgF,aAAaC,EAASC,GAAW,CAACD,EAASC,KAC3DkB,EAAIpG,EAAQ,IAAIgF,aAAaC,EAASC,GAAW,CAACD,EAASC,IACtDzK,EAAI,EAAGA,EAAIwK,EAAUxK,IAC1B,IAAK,IAAI0K,EAAI,EAAGA,EAAID,EAAUC,IAC1BgB,EAAE1P,IAAIgE,EAAE0K,EAhBL,EAgBc1K,GAAKqL,EAhBnB,GAgBgCb,GACnCmB,EAAE3P,IAAIgE,EAAE0K,EAAEc,EAAOd,GAAKY,EAAOE,GAAMf,GAQ3C,IAHA,IAAIG,EAAQrF,EAAQ,IAAIqG,WAAWpB,EAASC,GAAW,CAACD,EAASC,IAC7DK,EAAavF,EAAQ,IAAIqG,WAAWpB,EAASC,GAAW,CAACD,EAASC,IAE7DzK,EAAI,EAAGA,EAAIwK,EAAUxK,IAC1B,IAAK,IAAI0K,EAAI,EAAGA,EAAID,EAAUC,IAAK,CAC/B,IAAIvK,EAAIuL,EAAE1B,IAAIhK,EAAE0K,GACZtK,EAAIuL,EAAE3B,IAAIhK,EAAE0K,GAChBE,EAAM5O,IAAIgE,EAAE0K,EAAG/M,KAAKC,MAAOD,KAAK+D,KAAKvB,EAAEA,EAAIC,EAAEA,GAAGgL,IAChDN,EAAU9O,IAAIgE,EAAE0K,EAAG/M,KAAKC,OAAQD,KAAKkO,KAAKzL,EAAED,GAAKgL,GAAQF,IAIjE,MAAO,CAACL,MAAOA,EAAOE,UAAYA,EAAWN,SAAUA,EAAUC,SAAWA,GEwC9DqB,CAAgBpC,EAAG,MACQ,GAEjCqC,EAAWvF,EAAWoD,EAAGU,MAAM,GAAI,EAAG,GAAI,UAC9C3N,EAAYoP,EAASC,kBAIlB,GAAa,sBAATjD,EAA+BK,EAAI,CACxC,IAAI6C,EAAUpE,UAAmCqE,YAAYC,IAAKvD,EAAc,IAChFlB,oBAA8BuE,GAASG,KAAK,SAAA/N,GAAK,OAAI1B,EAAY0B,EAAMS,YAAYkN,eAKnF,IAFA,IAAIK,EAAY3F,EAAM4F,KAAKC,aAAaC,SAAS/C,GAC3CgD,EAAU/F,EAAM4F,KAAKI,oBAAoBC,kBAAkBN,EAAUO,MAClE5M,EAAG,EAAGA,EAAIyM,EAAQI,4BAA4BhN,OAAQG,IAC3D4G,EAAEf,OAAO4G,EAAQI,4BAA4B7M,GAAG8M,iBAAkBL,EAAQI,4BAA4B7M,GAAG+M,iBACvGN,EAAQI,4BAA4B7M,GAAGgN,eAAgBP,EAAQI,4BAA4B7M,GAAGiN,eAAgB1G,EAAwBkG,EAAQI,4BAA4B7M,GAAGkN,sBAKrL9H,QAAQC,IAAI,SAGdgD,EAASzB,IAEXoC,EAAOmE,kBAAkBvE,EAAc,KACtC,IAGHwE,EAAoDC,YAAY,CAAC3E,WAA1D4E,EAAYF,EAAZE,aAAcC,EAAaH,EAAbG,cAAeC,EAAYJ,EAAZI,aAKpC,OACEtO,EAAAC,EAAAC,cAACF,EAAAC,EAAM6E,SAAQ,KACb9E,EAAAC,EAAAC,cAAA,OAAK6E,UAAU,OACb/E,EAAAC,EAAAC,cAAA,OAAK6E,UAAU,cACX/E,EAAAC,EAAAC,cAAA,MAAA5B,OAAAiQ,OAAA,GAAUH,IAAc,CAAEtO,MAAO,CAC/B0O,UAAS,gBACTC,OAAM,iBACNC,UAAW,SACXC,IAAK,EACLC,QAAS,OAEX5O,EAAAC,EAAAC,cAAA,QAAWmO,KAELC,EACEtO,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,qEAIVF,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,SACE2O,GAAG,SACHhF,KAAK,QACLtK,IAAI,KACJ6D,IAAI,IACJ0L,KAAK,OACLC,aAAa,IACbC,SAAU,SAAAzN,GACRvD,EAAciR,WAAW1N,EAAEC,OAAOqF,YAKxC7G,EAAAC,EAAAC,cAAA,OAAKJ,MAAO,GAEVkP,SAAU,SAACE,GACPhR,EAAegR,EAAM1N,OAAOqF,SAEhC7G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,SAAO2J,KAAK,QAAQhD,MAAM,MAAMvG,KAAK,gBAAgB,OACrDN,EAAAC,EAAAC,cAAA,SAAO2J,KAAK,QAAQhD,MAAM,SAASvG,KAAK,gBAAgB,UACxDN,EAAAC,EAAAC,cAAA,SAAO2J,KAAK,QAAQhD,MAAM,QAAQvG,KAAK,gBAAgB,UAEvDN,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACiP,EAAAlP,EAAQ,CAACmP,YAAY,qBAAqBC,QAASnG,EAAMoG,iBAAkBN,SAAU,SAACzN,GAAC,OAAKgI,EAAmBhI,EAAEsF,UACxG7G,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,UAAQ8E,QAAS,SAACzD,GAEZnD,EAAY,KAEdyL,KAAK,SAAS9E,UAAW,UAAQ,wBAKvC/E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAS2J,KAAK,SAAS9E,UAAW,SAASC,QAAS,SAACzD,GACnD2E,QAAQC,IAAImD,GACZ7B,EAAOtJ,EAAU+K,EAAMxC,IAAI4C,MAE3B,8BAONtJ,EAAAC,EAAAC,cAAA,OAAK6E,UAAU,eACb/E,EAAAC,EAAAC,cAAEiE,EAAM,UC9LZoL,EAAc9K,SAAS+K,eAAe,QAC5CC,IAASC,OAAO1P,EAAAC,EAAAC,cAAC2I,EAAG,MAAK0G","file":"static/js/main.57abfdee.chunk.js","sourcesContent":["import create from \"zustand\";\n\nconst [useStore] = create(set => ({\n  width: window.innerWidth,\n  height: window.innerHeight,\n  setSize: ({ width, height }) => set({ width, height }),\n\n  imageWidth: 100,\n  imageHeight: 100,\n\n  imageURL : null,\n  setImageURL : url => set({imageURL: url}),\n\n  setImageSize: size =>\n    set(() => ({ imageWidth: size.width, imageHeight: size.height })),\n  scale: 1,\n  setScale: scale => set({ scale }),\n\n  brightness: 0,\n  setBrightness: brightness => set({ brightness }),\n\n  modeInteraction : \"add\",\n  setInteraction : modeInteraction => set({modeInteraction}),\n\n  polyline : [],\n  setPolyline : polyline => set({polyline})\n\n}));\n\nexport default useStore;\n","import React from \"react\";\nimport { Image, Layer } from \"react-konva\";\nimport useImage from \"use-image\";\n\n\nimport useStore from \"../store\";\n\nfunction getRelativePointerPosition(node) {\n  // the function will return pointer position relative to the passed node\n  const transform = node.getAbsoluteTransform().copy();\n  // to detect relative position we need to invert transform\n  transform.invert();\n\n  // get pointer (say mouse or touch) position\n  const pos = node.getStage().getPointerPosition();\n\n  // now we find relative point\n  return transform.point(pos);\n}\n\nconst IMAGE_NUMBER = 1 + Math.round(Math.random() * 1);\nconst IMAGE_URL = `image-${IMAGE_NUMBER}.jpg`;\n\nexport default () => {\n  const imgURL = useStore(s => s.imageURL);\n  const url = imgURL === null ? IMAGE_URL : imgURL\n  const [image] = useImage(url, \"Anonymous\");\n\n  const setImageSize = useStore(state => state.setImageSize);\n  const setScale = useStore(state => state.setScale);\n  const setSize = useStore(state => state.setSize);\n  const width = useStore(state => state.width);\n  const height = useStore(state => state.height);\n\n  const { brightness } = useStore();\n  const polyline = useStore((s) => s.polyline);\n  const setPolyline = useStore((s) => s.setPolyline);\n  const mode = useStore((s) => s.modeInteraction);\n\n\n  React.useEffect(() => {\n    if (!image) {\n      return;\n    }\n    const scale = Math.min(width / image.width, height / image.height);\n    setScale(scale);\n    setImageSize({ width: image.width, height: image.height });\n\n    const ratio = image.width / image.height;\n    setSize({\n      width: width,\n      height: width / ratio\n    });\n  }, [image, width, height, setScale, setImageSize, setSize]);\n\n  const layerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const canvas = layerRef.current.getCanvas()._canvas;\n    canvas.style.filter = `brightness(${(brightness + 1) * 100}%)`;\n  }, [brightness]);\n\n  return (\n    <Layer ref={layerRef}  >\n      <Image image={image} />\n\n    </Layer>\n  );\n};\n","import React from \"react\";\nimport { Layer, Line,Circle } from \"react-konva\";\nimport useStore from \"../store\";\n\nfunction getNodes(polyline, setPolyline){\n    const N = polyline.length/2;\n    let arr = []\n    for (let i = 0; i < N; i++) {\n        arr.push(\n              <Circle key={\"Node_\"+i} x={polyline[2*i]} y={polyline[2*i+1]} radius={3} fill=\"red\"  draggable\n              onDragEnd={\n                e=>{\n                    polyline[2*i] = e.target.x();\n                    polyline[2*i + 1] = e.target.y();\n                    setPolyline(polyline)\n                }\n            }\n            onDragMove={\n                    e=>{\n                        polyline[2*i] = e.target.x();\n                        polyline[2*i + 1] = e.target.y();\n                    }\n              }/>\n        )\n    }\n    return (\n        arr\n    )\n}\n\nexport default () => {\n  const polyline = useStore(s => s.polyline);\n  const setPolyline = useStore(s => s.setPolyline);\n  const layerRef = React.useRef(null);\n\n\n  return (\n    <Layer ref={layerRef}>\n        <Line  name=\"polyline\" points={polyline} strokeWidth={1} stroke=\"purple\" />\n        {\n            getNodes(polyline, setPolyline)\n        }\n    </Layer>\n  );\n};\n","export function closestNode(coordinates, x, y, d = 50) {\n    let iMin = -1;\n    let d2Min = d*d;\n    for (let i = 0; i < coordinates.length/2; i++){\n        let dx = (coordinates[2*i] - x);\n        let dy = (coordinates[2*i + 1] - y);\n        let d2 = dx*dx + dy*dy;\n        if (d2 < d2Min){\n            iMin = i;\n            d2Min = d2;\n        }\n    }\n    return iMin\n}\n\n\nfunction pDistance(x, y, x1, y1, x2, y2) {\n    //https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n    var A = x - x1;\n    var B = y - y1;\n    var C = x2 - x1;\n    var D = y2 - y1;\n  \n    var dot = A * C + B * D;\n    var len_sq = C * C + D * D;\n    var param = -1;\n    if (len_sq !== 0) //in case of 0 length line\n        param = dot / len_sq;\n  \n    var xx, yy;\n  \n    if (param < 0) {\n      xx = x1;\n      yy = y1;\n    }\n    else if (param > 1) {\n      xx = x2;\n      yy = y2;\n    }\n    else {\n      xx = x1 + param * C;\n      yy = y1 + param * D;\n    }\n  \n    var dx = x - xx;\n    var dy = y - yy;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport function closestEdge(coordinates, x, y, d = 50) {\n    let iMin = -1;\n    let dMin = d;\n    for (let i = 0; i < coordinates.length/2 -1 ; i++){\n        // Compute edge - can precopmute it actually\n        let d = pDistance(x, y, coordinates[2*i],  coordinates[2*i + 1],  coordinates[2*i + 2], coordinates[2*i + 3] )\n        if (d < dMin){\n            iMin = i;\n            dMin = d;\n        }\n    }\n    console.log(dMin)\n    return iMin\n}","import React from 'react';\nimport { Stage } from 'react-konva';\n\nimport BaseImage from './BaseImage';\nimport Polyline from './Polyline'\nimport useStore from '../store';\nimport {closestNode,closestEdge } from './polylineMath'\n\nfunction getRelativePointerPosition(node) {\n  // the function will return pointer position relative to the passed node\n  const transform = node.getAbsoluteTransform().copy();\n  // to detect relative position we need to invert transform\n  transform.invert();\n\n  // get pointer (say mouse or touch) position\n  const pos = node.getStage().getPointerPosition();\n\n  // now we find relative point\n  return transform.point(pos);\n}\n\nfunction zoomStage(stage, scaleBy, point = null) {\n  const oldScale = stage.scaleX();\n  let pos ={\n    x: stage.width() / 2,\n    y: stage.height() / 2,\n  };\n  if (point != null) {\n     pos.x = point.x\n     pos.y = point.y\n  }\n  else{\n\n  }\n  const mousePointTo = {\n    x: pos.x / oldScale - stage.x() / oldScale,\n    y: pos.y / oldScale - stage.y() / oldScale,\n  };\n\n  const newScale = Math.max(0.05, oldScale * scaleBy);\n\n  const newPos = {\n    x: -(mousePointTo.x - pos.x / newScale) * newScale,\n    y: -(mousePointTo.y - pos.y / newScale) * newScale,\n  };\n\n  const newAttrs = limitAttributes(stage, { ...newPos, scale: newScale });\n\n  stage.to({\n    x: newAttrs.x,\n    y: newAttrs.y,\n    scaleX: newAttrs.scale,\n    scaleY: newAttrs.scale,\n    duration: 0.1,\n  });\n}\n\nfunction limitAttributes(stage, newAttrs) {\n  const box = stage.findOne('Image').getClientRect();\n  const minX = -box.width + stage.width() / 2;\n  const maxX = stage.width() / 2;\n\n  const x = Math.max(minX, Math.min(newAttrs.x, maxX));\n\n  const minY = -box.height + stage.height() / 2;\n  const maxY = stage.height() / 2;\n\n  const y = Math.max(minY, Math.min(newAttrs.y, maxY));\n\n  const scale = Math.max(0.05, newAttrs.scale);\n\n  return { x, y, scale };\n}\n\nexport default () => {\n  const stageRef = React.useRef();\n  const { width, height } = useStore((s) => ({\n    width: s.width,\n    height: s.height,\n  }));\n  const setSize = useStore((s) => s.setSize);\n  const scale = useStore((state) => state.scale);\n\n  const polyline = useStore((s) => s.polyline);\n\n  const setPolyline = useStore((s) => s.setPolyline);\n  const mode = useStore((s) => s.modeInteraction);\n\n\n  React.useEffect(() => {\n    function checkSize() {\n      const container = document.querySelector('.right-panel');\n      setSize({\n        width: container.offsetWidth,\n        height,\n      });\n    }\n    checkSize();\n    window.addEventListener('resize', checkSize);\n    return () => window.removeEventListener('resize', checkSize);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Stage\n        ref={stageRef}\n        width={width}\n        height={height}\n        scaleX={scale}\n        scaleY={scale}\n        className=\"canvas\"\n        draggable={true}\n        onClick={(e) => {\n          const point = getRelativePointerPosition(e.target.getStage()); \n\n          if (mode === \"add\") { \n            const newPolyline = polyline.concat([point.x, point.y])   \n            setPolyline(newPolyline)       \n          }\n          else if (mode === \"remove\"){\n              let i = closestNode(polyline, point.x, point.y)\n              if (i >= 0) {\n                polyline.splice(2*i, 2)\n                setPolyline(polyline)       \n              }\n          }\n          else if (mode === \"split\"){\n            let i = closestEdge(polyline, point.x, point.y);\n            if (i >= 0) {\n              console.log(polyline)\n              polyline.splice(2*i + 2, 0, point.x, point.y)\n              console.log(polyline)\n\n              setPolyline(polyline)       \n            }\n          }\n\n        }}\n      >\n        <BaseImage />\n        <Polyline />\n      </Stage>\n      <div className=\"zoom-container\">\n        <button\n          onClick={() => {\n            zoomStage(stageRef.current, 1.2);\n          }}\n        >\n          +\n        </button>\n        <button\n          onClick={() => {\n            zoomStage(stageRef.current, 0.8);\n          }}\n        >\n          -\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\n\n/*\n        onWheel={ (e) => {\n          if (e.evt.ctrlKey ) {\n\n            e.evt.preventDefault();\n            let scale = 1.2\n            let factor = e.evt.deltaY > 0 ? 1/scale : scale\n            zoomStage(stageRef.current, factor)\n          }\n        }}\n*/","var ndarray = require(\"ndarray\")\nvar ndarrayops = require(\"ndarray-ops\")\n\nexport function generateIndices(hdf5, desiredPixelSize) {\n    let tissue = hdf5.get('Tissue')\n    let imageShape = tissue.shape\n    let nLines = imageShape[1]\n    let nPixelsR = imageShape[2];\n    \n    let dtheta = tissue.attrs['Width'] / nLines\n    let theta0 = - tissue.attrs['Width'] /2 \n    let dr = tissue.attrs['DepthEnd'] / (nPixelsR)\n\n    let tilt = tissue.attrs['Tilt']\n\n    let xmin = 0\n    let xmax = tissue.attrs['DepthEnd']\n    let ymax = tissue.attrs['DepthEnd'] * Math.sin(tissue.attrs['Width'] /2 )\n    let ymin = - ymax\n\n\n    let nPixelsX = Math.ceil((xmax - xmin)/desiredPixelSize)\n    let nPixelsY = Math.ceil((ymax - ymin)/desiredPixelSize)\n    let pixelSize = [(xmax - xmin)/nPixelsX, (ymax - ymin)/nPixelsY]\n    let center = [0  - tissue.attrs['Origo'][0]/pixelSize[0], nPixelsY/2 - tissue.attrs['Origo'][1]/pixelSize[1]] \n\n    // Generate the coordinates\n    let X = ndarray(new Float32Array(nPixelsX*nPixelsY), [nPixelsX,nPixelsY])\n    let Y = ndarray(new Float32Array(nPixelsX*nPixelsY), [nPixelsX,nPixelsY])\n    for (let i = 0; i < nPixelsX; i++) {\n        for (let j = 0; j < nPixelsY; j++) {\n            X.set(i,j,xmin + i * (xmax - xmin)/nPixelsX)\n            Y.set(i,j,ymin + j * (ymax - ymin)/nPixelsY)\n        }\n    }\n\n    //Create the blank matrix\n    let R_idx = ndarray(new Int32Array(nPixelsX*nPixelsY), [nPixelsX,nPixelsY])\n    let theta_idx  = ndarray(new Int32Array(nPixelsX*nPixelsY), [nPixelsX,nPixelsY])\n\n    for (let i = 0; i < nPixelsX; i++) {\n        for (let j = 0; j < nPixelsY; j++) {\n            let x = X.get(i,j);\n            let y = Y.get(i,j)\n            R_idx.set(i,j, Math.round( Math.sqrt(x*x + y*y)/dr ))\n            theta_idx.set(i,j, Math.round( (Math.atan(y/x) - theta0)/dtheta) )\n        }\n    }\n\n    return {R_idx: R_idx, theta_idx : theta_idx, nPixelsX: nPixelsX, nPixelsY : nPixelsY}\n}\n\nexport function reconstructEcholine(hdf5, indices, t) {\n    let tissue = hdf5.get('Tissue');\n    let imageShape = tissue.shape\n    let nLines = imageShape[1]\n    let nPixelsR = imageShape[2];\n\n\n    let imagePolar = ndarray(tissue.value, imageShape);\n    let imagePolart = imagePolar.pick(t, null, null);\n\n    let im = ndarray(new Float32Array(indices.nPixelsX*indices.nPixelsY), [indices.nPixelsX,indices.nPixelsY])\n\n    for (let i = 0; i < indices.nPixelsX; i++) {\n        for (let j = 0; j < indices.nPixelsY; j++) {\n            let id_r =  indices.R_idx.get(i,j)\n            let id_theta = indices.theta_idx.get(i,j)\n            if (id_r < 0 || id_r >= nPixelsR ) {\n                im.set(i,j, 0);\n            }\n            else if (id_theta < 0 || id_theta >= nLines) {\n                im.set(i,j, 0);\n            }\n            else {\n                im.set(i,j,  imagePolart.get(id_theta, id_r));\n            }\n\n        }\n    }\n    return im;\n}","export class Units{\n    constructor(){\n        this.sor = [];\n        this.addSOR(0,0,1,1,'Pixels');\n    }\n\n    addSOR(x0,y0,xScale,yScale, name){\n        this.sor.push(\n            {x0: x0, y0: y0, xScale: xScale, yScale: yScale, name: name}\n        )\n    }\n    getOptionsList(){\n        /* Gets the list of options for a dropdown component */\n        let r = [];\n        for (let i =0; i< this.sor.length; i += 1){\n            r.push({value : String(i), label : this.sor[i].name});\n        }\n        return r;\n    }\n\n};\n\nexport  function applySOR(points, u ){\n    let points_trnf =  [...points]\n    for (let i =0; i < points.length; i +=2 ){\n        points_trnf[i] = (points[i+1] - u.x0) * u.xScale \n        points_trnf[i + 1] = (points[i+1] - u.y0) * u.yScale \n    }\n    return points_trnf\n}\n\n\nexport function RegionDataTypeToString(i){\n    /* For dicom parsing, detect what type of region is*/\n    switch(i){\n      case 1:\n        return \"Tissue\"\n      case 2:\n        return \"Color Flow\"\n      case 3:\n        return \"PW Spectral Doppler\"\n      case 4:\n        return \"CW Spectral Doppler\"\n      case 5:\n        return \"Doppler Mean Trace\"\n      case 6:\n        return \"Doppler Mode Trace\"\n      case 7:\n        return \"Doppler Max Trace\"\n      case 8:\n        return \"Volume Trace\"\n      case 10:\n        return \"ECG Trace\"\n      case 11:\n        return \"Pulse Trace\"\n      case 12:\n        return \"Phonocardiogram Trace\"\n      case 13:\n        return \"Gray bar\"\n      case 14:\n        return \"Color bar\"\n      case 15:\n        return \"Integrated Backscatter\"\n      case 16:\n        return \"Area Trace\"\n      case 16:\n        return \"d(area)/dt\"\n      case 18:\n        return \"Other Physiological (Amplitude vs. Time) input\"\n      default:\n        return \"Unknown\"\n    }\n  }\n  ","import React, {useCallback, useState} from \"react\";\nimport Canvas from \"./Canvas\";\nimport useStore from \"../store\";\nimport {useDropzone} from 'react-dropzone';\nimport{generateIndices, reconstructEcholine} from './reconstructionEchocardiography';\nimport Dropdown from 'react-dropdown';\n\nimport * as cornerstone from \"cornerstone-core\";\nimport * as cornerstoneMath from \"cornerstone-math\";\nimport * as cornerstoneTools from \"cornerstone-tools\";\nimport Hammer from \"hammerjs\";\nimport * as cornerstoneWADOImageLoader from \"cornerstone-wado-image-loader\";\n// import * as cornerstoneWebImageLoader from \"cornerstone-web-image-loader\";\nimport * as dicomParser from \"dicom-parser\";\nimport {Units, applySOR, RegionDataTypeToString} from  \"./unit\";\nimport 'react-dropdown/style.css';\n\nvar savePixels = require(\"save-pixels\")\nconst hdf5 = window.hdf5;\n\n\nvar dcmjs = require('dcmjs');\n\ncornerstoneTools.external.cornerstone = cornerstone;\ncornerstoneTools.external.cornerstoneMath = cornerstoneMath;\ncornerstoneTools.external.Hammer = Hammer;\ncornerstoneWADOImageLoader.external.dicomParser = dicomParser;\ncornerstoneWADOImageLoader.external.cornerstone = cornerstone;\n// cornerstoneWebImageLoader.external.cornerstone = cornerstone;\n\nfunction getCSV(polyline, u){\n  let csvContent = \"data:text/csv;charset=utf-8,\";  \n  let p = applySOR(polyline, u);\n  csvContent += \"x0, y0,\" + u.name + \"\\n\";\n  for (let i =0; i < p.length; i += 2){\n    csvContent += String(p[i]) + \",\" + String(p[i+ 1]) + \", \\n\";\n  }\n  var encodedUri = encodeURI(csvContent);\n  var link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodedUri);\n  link.setAttribute(\"download\", \"my_data.csv\");\n  document.body.appendChild(link); // Required for FF\n  \n  link.click(); // This will download the data file named \"my_data.csv\".} \n}\n\nexport default () => {\n  const { setBrightness } = useStore();\n  const { setInteraction } = useStore();\n  const { setImageURL } = useStore();\n  const { polyline } = useStore();\n\n  const setPolyline = useStore((s) => s.setPolyline);\n\n  // TODO: save dicom, and pixel to physical functions\n  // TODO: select echo region\n  // TODO: add frame selector\n\n  cornerstoneWADOImageLoader.configure({ useWebWorkers: false });\n\n  const[units , setUnits] = useState(new Units());\n  const[selectedUnitIdx, setSelectedUnitIdx] = useState(0);\n\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    let datafilename = acceptedFiles[0].filename;\n    let type = acceptedFiles[0].type;\n    let reader = new FileReader();\n    reader.onloadend = function(evt) { \n      var dcm = false;\n      var array = new Uint8Array(evt.target.result);\n      var s = \"\";\n      var start = 128, end = 132;\n      for (var i = start; i < end; ++i) {\n          s += String.fromCharCode(array[i]);\n      }\n\n      if (s == \"DICM\") {\n        dcm = true;\n      }\n \n      let barr = evt.target.result;\n      let u = new Units();\n      \n\n      if (type === 'application/h5'){\n        var f = new hdf5.File(barr, datafilename);\n        // do something with f...\n\n        let idx = generateIndices(f, 0.0001);\n        let im = reconstructEcholine(f, idx, 0);\n\n        let imCanvas = savePixels(im.pick(-1, -1, 0), \"CANVAS\");\n        setImageURL(imCanvas.toDataURL());\n        // TODO  : add units\n\n      }\n      else if (type === 'application/dicom' | dcm){\n          var imageId = cornerstoneWADOImageLoader.wadouri.fileManager.add( acceptedFiles[0]);           // If want to access a specific frame, add ?frame=t where t is the index: Ex           imageId = imageId + '?frame=100'\n          cornerstone.loadAndCacheImage(imageId).then(image => setImageURL(image.getCanvas().toDataURL()));\n\n          //TODO: Read the echo regions\n          let DicomDict = dcmjs.data.DicomMessage.readFile(barr);\n          const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(DicomDict.dict);\n          for (let i =0; i < dataset.SequenceOfUltrasoundRegions.length; i++){\n              u.addSOR(dataset.SequenceOfUltrasoundRegions[i].ReferencePixelX0, dataset.SequenceOfUltrasoundRegions[i].ReferencePixelX1, \n                dataset.SequenceOfUltrasoundRegions[i].PhysicalDeltaX, dataset.SequenceOfUltrasoundRegions[i].PhysicalDeltaY, RegionDataTypeToString( dataset.SequenceOfUltrasoundRegions[i].RegionDataType))\n          }\n\n      }\n      else {\n        console.log('error')\n      }\n\n      setUnits(u)\n    }\n    reader.readAsArrayBuffer(acceptedFiles[0]);\n  }, []);\n\n\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  const options = [\n    'one', 'two', 'three'\n  ];\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <div className=\"left-panel\">\n            <div  {...getRootProps()} style={{\n              boxShadow: `0 0 5px grey}`,\n              border: `1px solid grey`,\n              textAlign: \"center\",\n              top: 0,\n              z_index: 999\n            }}>\n            <input {...getInputProps()}  />\n                {\n                  isDragActive ?\n                    <p>Drop the h5 here ...</p> :\n                    <p >Drag 'n' drop some files here, or click to select files</p>\n                }\n            </div>\n\n          <div>\n          Brigthess\n          <input\n            id=\"slider\"\n            type=\"range\"\n            min=\"-1\"\n            max=\"1\"\n            step=\"0.05\"\n            defaultValue=\"0\"\n            onChange={e => {\n              setBrightness(parseFloat(e.target.value));\n            }}\n          />\n          </div>\n        \n        <div style={{\n          }}\n          onChange={(event) => {\n              setInteraction(event.target.value)\n            }}>\n          <div>\n          <p> Node Interaction:</p>\n\n          <input type=\"radio\" value=\"add\" name=\"interaction\" /> Add\n          <input type=\"radio\" value=\"remove\" name=\"interaction\" /> Remove\n          <input type=\"radio\" value=\"split\" name=\"interaction\" /> Split\n          </div>\n          <br/>\n\n          <Dropdown placeholder=\"Select export unit\" options={units.getOptionsList()} onChange={(e) => setSelectedUnitIdx(e.value)}  ></Dropdown>\n                    <div>\n            <button onClick={(e) =>\n                { \n                  setPolyline([]);       \n                }}\n                type=\"button\" className =\"button\"> \n                Delete segmentation\n           </button>\n          </div>\n  \n          <div>\n            <button  type=\"button\" className =\"button\" onClick={(e)=> {\n              console.log(selectedUnitIdx)\n              getCSV(polyline, units.sor[selectedUnitIdx])\n\n            }}> Download segmentation </button>\n          </div>\n\n\n        </div >\n        </div> \n\n        <div className=\"right-panel\">\n          < Canvas/>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n\n\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}